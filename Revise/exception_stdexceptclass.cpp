#include<iostream>
/*<stdexcept>: Defines a set of standard exceptions that both the library and programs can use to report common errors.

<exception>: Defines the BASE CLASS (i.e., std::exception) for all exceptions thrown by the elements of the standard library, along with several types
and utilities to assist handling exceptions.
So, <exception> only defines the class std::exception, while <stdexcept> defines several classes that inherit 
from std::exception (e.g., std::logic_error, std::out_of_range). THAT IS WHY <stdexcept> INCLUDES <exception>.

They are in separate headers because if you want to define your own exception class inheriting
std::exception (and not use the classes from <stdexcept>), you can avoid unnecessary definitions.*/

//#include<exception> two main classes derive from this, runtime_error and logic_error, which are defined inside <stdexcept> header file.
#include<stdexcept> //stdexcept stands for "standard exceptions" that are already defined in c++. stdexcept derives from <exception> class
//ALWAYS USE stdexcept. For User defined exceptions,you'll have to use the <exception> base class,not the <stdexcept>
// We are using std::runtime_error exception class here.
using namespace std;

int main()
{
    int a,b;
    cin>>a>>b;
    try
    {
        if(b==0)
        {
            throw runtime_error("UNDEFINED:divide by zero error"); //throwing a runtime_error object. the exception generated is an object of the runtime_error class.
        }//runtime_error is derived from the exception class.
            cout<<a/b;
    }
    catch(const runtime_error &e)//accepting the runtime_error object as a reference that has been generated by throw
    {
        cerr << e.what() << '\n'; //exception class defines a virtual method what(). it returns a pointer to a c-string with content related to the exception
        //helps identify the exception
    }
    
}